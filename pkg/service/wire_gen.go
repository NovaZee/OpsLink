// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package service

import (
	"github.com/denovo/permission/config"
	"github.com/denovo/permission/pkg/casbin"
	"github.com/denovo/permission/pkg/kubeclient"
	"github.com/denovo/permission/pkg/store"
)

// Injectors from wire.go:

func InitializeServer(cfg *config.OpsLinkConfig) (*OpsLinkServer, error) {
	casbin, err := initCasbin(cfg)
	if err != nil {
		return nil, err
	}
	storeService, err := initStore(cfg)
	if err != nil {
		return nil, err
	}
	kubernetesClient, err := initClientSet(cfg)
	if err != nil {
		return nil, err
	}
	signalService, err := initSignalService(cfg)
	if err != nil {
		return nil, err
	}
	opsLinkServer, err := NewOpsLinkServer(cfg, casbin, storeService, kubernetesClient, signalService)
	if err != nil {
		return nil, err
	}
	return opsLinkServer, nil
}

// wire.go:

func initCasbin(conf *config.OpsLinkConfig) (*casbin.Casbin, error) {
	return casbin.InitCasbin(conf)
}

func initStore(conf *config.OpsLinkConfig) (store.StoreService, error) {
	return store.NewStoreService(conf)
}

func initSignalService(conf *config.OpsLinkConfig) (*SignalService, error) {
	return NewSignalService(), nil
}

func initClientSet(conf *config.OpsLinkConfig) (*kubeclient.KubernetesClient, error) {
	clinetInterface, err := kubeclient.NewClientInterface(conf, kubeclient.K8sClientTypeKubernetes)
	if err != nil {
		return nil, err
	}
	return kubeclient.GetClientSet(clinetInterface), nil
}
